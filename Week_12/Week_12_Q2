#include <iostream>
#include <vector>
using namespace std;

int knapsack(vector<int>& p, vector<int>& w, int k, int n) {
    vector<vector<int>> sol(n + 1, vector<int>(k + 1, 0));

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= k; j++) {
            if(i==0 || j==0){
              sol[i][j]=0;
            }
            if (w[i - 1] <= j) { 
                sol[i][j] = max(sol[i - 1][j], p[i - 1] + sol[i - 1][j - w[i - 1]]);
            } else {
                sol[i][j] = sol[i - 1][j];
            }
        }
    }
    return sol[n][k];
}

int main() {
    int n, temp;
    vector<int> p;
    vector<int> w;
    int k;
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> temp;
        w.push_back(temp);
    }
    for (int i = 0; i < n; i++) {
        cin >> temp;
        p.push_back(temp);
    }
    cin >> k;

    int result = knapsack(p, w, k, n);
    cout << result;
    return 0;
}
